#!/usr/bin/env zsh

PRIMARY=`tput setaf 6; tput bold`
HIGHLIGHT=`tput setaf 5; tput bold`
TITLE=`tput setaf 0; tput bold; tput smul`
STOP=`tput rmul; tput sgr0`
DIM=`tput dim`
NC=`tput sgr0; tput rmul`

while read line || [[ -n ${line} ]]
do
    if ! [[ ${WORKON_HOME}/${line} == ${VIRTUAL_ENV} ]]; then
        workon ${line};
        echo work on ${RED}${line}${NC};
    fi
done < .venv

nvm use > /dev/null
echo Using NPM ${RED}`nvm current`${NC}

echo;
echo;
echo "$TITLE                             ENVIRONMENT VARIABLES                              $STOP"
echo;

export PYTHONPATH=$PWD
echo export ${PRIMARY}PYTHONPATH${NC}=${DIM}$PWD${NC}

function set_env {
  if [[ ! -z $1 || ! -r !.env.${1} ]]; then
    1=local;
  fi

  cat .env.$1 \
  | sed -e '/^\s*[;#]/d' -e  's/\(^[A-Z_]\+\)\( \?= \?\)\(\w\+\)/\1=\3/' \
  | while read line || [[ -n ${line} ]]; do
      export $line
      echo export $line \
          | awk -F " |=" '{ gsub(/[a-zA-Z]/, "_", $3) }
                          { gsub(/[0-9]/, "#", $3) }
                          { print $1, $2, $3}'\
          | while read A B C; do echo "$NC$A $HIGHLIGHT$B$NC=$DIM$C$NC"; done\
          | cut -c 1-115
  done

}
set_env


echo ${NC};
echo;
echo "$TITLE                             ENVIRONMENT ALIASES                                $STOP"
echo;

# echo "alias ${PRIMARY}set_env$NC        ${DIM}Load .env file.$NC"

alias  req="pip-compile requirements/local.in &\
            pip-compile requirements/production.in &\
            pip-compile requirements/staging.in &\
            pip-compile requirements/test.in &\
            wait; wait && \
            pip wheel -r requirements/local.txt &\
            pip wheel -r requirements/production.txt &\
            pip wheel -r requirements/staging.txt &\
            pip wheel -r requirements/test.txt &\
            wait"
echo "alias ${PRIMARY}req$NC            ${DIM}Build requirements files for 'pip'.$NC"

function stage {
  if [[ ! ${+1} || ! -r requirements/$1.txt ]]; then
    requirements_file=requirements/local.txt
  else
    requirements_file=requirements/$1.txt
  fi
  set_env $1
  req && pip-sync $requirements_file

}
echo "alias ${PRIMARY}stage$NC          ${DIM}Run $NC${PRIMARY}req$NC${DIM} and Sync requirements. Defauls to 'local'$NC"

alias cov='gulp clean:cov && coverage run manage.py test -v 2 --settings config.settings.test && coverage html && serve:cov'
# echo "alias ${PRIMARY}cov$NC            ${DIM}Build coverage report and$NC ${PRIMARY}serve$NC"

# alias serve='django-admin runserver_plus || django-admin runserver'
# echo "alias ${PRIMARY}serve$NC          ${DIM}Run Django dev server.$NC"
alias app='python manage.py'
echo "alias ${PRIMARY}app$NC            ${DIM}"python manage.py"$NC"

alias serve:watch='app runserver_plus --extra-file=annotation_tool/bootstrap/templates/bootstrap3/{*/,}*.html'
echo "alias ${PRIMARY}serve:watch$NC    ${DIM}Run Django dev server. Watch 'pubmed' templates.$NC"

alias serve:cov='gulp serve:cov'
echo "alias ${PRIMARY}serve:cov$NC      ${DIM}Serve coverage HTML pages.$NC"

alias imp='isort -rc -v annotation_tool'
echo "alias ${PRIMARY}imp$NC            ${DIM}Cleanup imports.$NC"


echo ${NC}
